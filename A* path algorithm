import pygame
import math
from queue import PriorityQueue as pq

#screen deminsions
width=600
screen=pygame.display.set_mode((width,width))
pygame.display.set_caption("A* Path Finding Algorithm")

#colors
red=pygame.Color('red')
green=pygame.Color('green')
black=pygame.Color('black')
teal=pygame.Color('turquoise')
orange=pygame.Color('orange')
purple=pygame.Color('purple')
white=pygame.Color('white')
grey=pygame.Color('grey')

class cubes:
    def __init__(self,row,col,width,total_rows):
        self.row=row
        self.col=col
        self.x=row*width
        self.y=col*width
        self.color=white
        self.neighbors=[]
        self.width=width
        self.total_rows=total_rows

    def get_pos(self):
        return self.row,self.col
    
    def closed(self):
        return self.color==red
    
    def open(self):
        return self.color==green
    
    def obstacles(self):
        return self.color==black
    
    def start(self):
        return self.color==orange
    
    def end(self):
        return self.color==teal
    
    def reset(self):
        self.color=white
    
    def make_closed(self):
        self.color=red
    
    def make_open(self):
        self.color=green
    
    def make_obstacles(self):
        self.color=black
    
    def make_start(self):
        self.color=orange
    
    def make_end(self):
        self.color=teal
    
    def make_reset(self):
        self.color=white
    
    def make_path(self):
        self.color=purple
    
    def draw(self, screen):
        pygame.draw.rect(screen,self.color,(self.x,self.y,self.width,self.width))
    
    def update_neighbors(self,grid):
        self.neighbors=[]
        if self.row<self.total_rows-1 and not grid[self.row+1][self.col].obstacles():#down
            self.neighbors.append(grid[self.row+1][self.col])

        if self.row>0 and not grid[self.row-1][self.col].obstacles():#up
            self.neighbors.append(grid[self.row-1][self.col])
        
        if self.col<self.total_rows-1 and not grid[self.row][self.col+1].obstacles():#right
            self.neighbors.append(grid[self.row][self.col+1])
        
        if self.col>0 and not grid[self.row][self.col-1].obstacles():#left
            self.neighbors.append(grid[self.row][self.col-1])

    def __lt__(self,other):
        return False
    
def h(p1,p2):
    x1,y1=p1
    x2,y2=p2
    return abs(x1-x2)+abs(y1-y2)

def reconstruct_path(came_from,current,draw):
    while current in came_from:
        current=came_from[current]
        current.make_path()
        draw()

def algorithm(draw,grid,start,end):
    count=0
    open_set=pq()
    open_set.put((0,count,start))
    came_from={}
    g_score={cube:float('inf')for row in grid for cube in row}
    g_score[start]=0
    f_score={cube:float('inf')for row in grid for cube in row}
    f_score[start]=h(start.get_pos(),end.get_pos())

    open_set_hash={start}

    while not open_set.empty():
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                pygame.quit()
        
        current=open_set.get()[2]
        open_set_hash.remove(current)

        if current==end:
            reconstruct_path(came_from,end,draw)
            end.make_end()
            return True
        
        for neighbor in current.neighbors:
            temp_g_score=g_score[current]+1
            if temp_g_score<g_score[neighbor]:
                came_from[neighbor]=current
                g_score[neighbor]=temp_g_score
                f_score[neighbor]=temp_g_score+h(neighbor.get_pos(),end.get_pos())
                if neighbor not in open_set_hash:
                    count+=1
                    open_set.put((f_score[neighbor],count,neighbor))
                    open_set_hash.add(neighbor)
                    neighbor.make_open()
        draw()

        if current != start:
            current.make_closed()
        
    return False



def make_grid(rows,width):
    grid=[]
    gap=width//rows
    for i in range(rows):
        grid.append([])
        for j in range(rows):
            cube=cubes(i,j,gap,rows)
            grid[i].append(cube)
    
    return grid

def draw_grid(screen,rows,width):
    gap=width//rows
    for i in range(rows):
        pygame.draw.line(screen,grey,(0,i*gap),(width,i*gap))
        for j in range(rows):
            pygame.draw.line(screen,grey,(j*gap,0),(j*gap,width))


def draw(screen,grid,rows,width):
    screen.fill(white)

    for row in grid:
        for cube in row:
            cube.draw(screen)
    
    draw_grid(screen,rows,width)
    pygame.display.update()

def get_clicked_pos(pos,rows,width):
    gap=width//rows
    y,x=pos
    
    row=y//gap
    col=x//gap
    
    return row,col

def main(screen,width):
    rows=50
    grid=make_grid(rows,width)

    start=None
    end=None

    run=True
    while run:
        draw(screen,grid,rows,width)
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                run=False

            if pygame.mouse.get_pressed()[0]:#left
                pos=pygame.mouse.get_pos()
                row,col=get_clicked_pos(pos,rows,width)
                cube=grid[row][col]
                if not start and cube!=end:
                    start=cube
                    start.make_start()
                
                elif not end and cube!=start:
                    end=cube
                    end.make_end()

                elif cube!=end and cube!=start:
                    cube.make_obstacles()
            
            elif pygame.mouse.get_pressed()[2]:#right
                pos=pygame.mouse.get_pos()
                row,col=get_clicked_pos(pos,rows,width)
                cube=grid[row][col]
                cube.reset()
                if cube==start:
                    start=None
                elif cube==end:
                    end=None
            
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and start and end:
                    for row in grid:
                        for cube in row:
                            cube.update_neighbors(grid)
                    
                    algorithm(lambda:draw(screen,grid,rows,width),grid,start,end)

                if event.key==pygame.K_c:
                    start=None
                    end=None
                    grid=make_grid(rows,width)

    pygame.quit()
main(screen,width)
